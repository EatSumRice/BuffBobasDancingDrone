# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from buff_pkg/Song.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Song(genpy.Message):
  _md5sum = "9b8923dbcfe00245bdb812b481eeb694"
  _type = "buff_pkg/Song"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string filename
float32 tempo
int32 time_sig
bool pickup
float32[] beat_durations
"""
  __slots__ = ['filename','tempo','time_sig','pickup','beat_durations']
  _slot_types = ['string','float32','int32','bool','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       filename,tempo,time_sig,pickup,beat_durations

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Song, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.filename is None:
        self.filename = ''
      if self.tempo is None:
        self.tempo = 0.
      if self.time_sig is None:
        self.time_sig = 0
      if self.pickup is None:
        self.pickup = False
      if self.beat_durations is None:
        self.beat_durations = []
    else:
      self.filename = ''
      self.tempo = 0.
      self.time_sig = 0
      self.pickup = False
      self.beat_durations = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.filename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fiB().pack(_x.tempo, _x.time_sig, _x.pickup))
      length = len(self.beat_durations)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.beat_durations))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filename = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.filename = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.tempo, _x.time_sig, _x.pickup,) = _get_struct_fiB().unpack(str[start:end])
      self.pickup = bool(self.pickup)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.beat_durations = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.filename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fiB().pack(_x.tempo, _x.time_sig, _x.pickup))
      length = len(self.beat_durations)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.beat_durations.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filename = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.filename = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.tempo, _x.time_sig, _x.pickup,) = _get_struct_fiB().unpack(str[start:end])
      self.pickup = bool(self.pickup)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.beat_durations = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fiB = None
def _get_struct_fiB():
    global _struct_fiB
    if _struct_fiB is None:
        _struct_fiB = struct.Struct("<fiB")
    return _struct_fiB
