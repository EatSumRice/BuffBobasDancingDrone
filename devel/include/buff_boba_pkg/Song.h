// Generated by gencpp from file buff_boba_pkg/Song.msg
// DO NOT EDIT!


#ifndef BUFF_BOBA_PKG_MESSAGE_SONG_H
#define BUFF_BOBA_PKG_MESSAGE_SONG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace buff_boba_pkg
{
template <class ContainerAllocator>
struct Song_
{
  typedef Song_<ContainerAllocator> Type;

  Song_()
    : filename()
    , tempo(0.0)
    , time_sig(0)
    , pickup(false)
    , beat_durations()  {
    }
  Song_(const ContainerAllocator& _alloc)
    : filename(_alloc)
    , tempo(0.0)
    , time_sig(0)
    , pickup(false)
    , beat_durations(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  _filename_type filename;

   typedef float _tempo_type;
  _tempo_type tempo;

   typedef int32_t _time_sig_type;
  _time_sig_type time_sig;

   typedef uint8_t _pickup_type;
  _pickup_type pickup;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _beat_durations_type;
  _beat_durations_type beat_durations;





  typedef boost::shared_ptr< ::buff_boba_pkg::Song_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::buff_boba_pkg::Song_<ContainerAllocator> const> ConstPtr;

}; // struct Song_

typedef ::buff_boba_pkg::Song_<std::allocator<void> > Song;

typedef boost::shared_ptr< ::buff_boba_pkg::Song > SongPtr;
typedef boost::shared_ptr< ::buff_boba_pkg::Song const> SongConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::buff_boba_pkg::Song_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::buff_boba_pkg::Song_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::buff_boba_pkg::Song_<ContainerAllocator1> & lhs, const ::buff_boba_pkg::Song_<ContainerAllocator2> & rhs)
{
  return lhs.filename == rhs.filename &&
    lhs.tempo == rhs.tempo &&
    lhs.time_sig == rhs.time_sig &&
    lhs.pickup == rhs.pickup &&
    lhs.beat_durations == rhs.beat_durations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::buff_boba_pkg::Song_<ContainerAllocator1> & lhs, const ::buff_boba_pkg::Song_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace buff_boba_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::buff_boba_pkg::Song_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::buff_boba_pkg::Song_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::buff_boba_pkg::Song_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::buff_boba_pkg::Song_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::buff_boba_pkg::Song_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::buff_boba_pkg::Song_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::buff_boba_pkg::Song_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b8923dbcfe00245bdb812b481eeb694";
  }

  static const char* value(const ::buff_boba_pkg::Song_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b8923dbcfe00245ULL;
  static const uint64_t static_value2 = 0xbdb812b481eeb694ULL;
};

template<class ContainerAllocator>
struct DataType< ::buff_boba_pkg::Song_<ContainerAllocator> >
{
  static const char* value()
  {
    return "buff_boba_pkg/Song";
  }

  static const char* value(const ::buff_boba_pkg::Song_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::buff_boba_pkg::Song_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string filename\n"
"float32 tempo\n"
"int32 time_sig\n"
"bool pickup\n"
"float32[] beat_durations\n"
;
  }

  static const char* value(const ::buff_boba_pkg::Song_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::buff_boba_pkg::Song_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.filename);
      stream.next(m.tempo);
      stream.next(m.time_sig);
      stream.next(m.pickup);
      stream.next(m.beat_durations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Song_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::buff_boba_pkg::Song_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::buff_boba_pkg::Song_<ContainerAllocator>& v)
  {
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filename);
    s << indent << "tempo: ";
    Printer<float>::stream(s, indent + "  ", v.tempo);
    s << indent << "time_sig: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time_sig);
    s << indent << "pickup: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pickup);
    s << indent << "beat_durations[]" << std::endl;
    for (size_t i = 0; i < v.beat_durations.size(); ++i)
    {
      s << indent << "  beat_durations[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.beat_durations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BUFF_BOBA_PKG_MESSAGE_SONG_H
